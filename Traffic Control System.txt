cpp
int signal1[] = {23, 25, 27};
int signal2[] = {46, 48, 50};
int signal3[] = {13, 12, 11};
int signal4[] = {10, 9, 8};

const int redDelay = 5000;
const int yellowDelay = 2000;

const int triggerpin1 = 31;
const int echopin1 = 29;
const int triggerpin2 = 44;
const int echopin2 = 42;
const int triggerpin3 = 7;
const int echopin3 = 6;
const int triggerpin4 = 5;
const int echopin4 = 4;

long lastSensorCheckTime = 0;
const int sensorCheckInterval = 100;  // 100 milliseconds

volatile long time1, time2, time3, time4;  // Variables for storing the time traveled
volatile int S1, S2, S3, S4;  // Variables for storing the distance covered

const int t = 5;  // distance under which it will look for vehicles

int currentSignal = 1;  // Variable to keep track of the current active signal

void setup() {
  Serial.begin(115200);

  // Declare LED pins as output
  for (int i = 0; i < 3; i++) {
    pinMode(signal1[i], OUTPUT);
    pinMode(signal2[i], OUTPUT);
    pinMode(signal3[i], OUTPUT);
    pinMode(signal4[i], OUTPUT);
  }

  // Declare ultrasonic sensor pins
  pinMode(triggerpin1, OUTPUT);
  pinMode(echopin1, INPUT);
  pinMode(triggerpin2, OUTPUT);
  pinMode(echopin2, INPUT);
  pinMode(triggerpin3, OUTPUT);
  pinMode(echopin3, INPUT);
  pinMode(triggerpin4, OUTPUT);
  pinMode(echopin4, INPUT);
}

void loop() {
  // Check sensors every sensorCheckInterval
  if (millis() - lastSensorCheckTime >= sensorCheckInterval) {
    readSensors();
    lastSensorCheckTime = millis();
  }

  // Control signals based on sensor readings
  if (S1 < t || S2 < t || S3 < t || S4 < t) {
    switch (currentSignal) {
      case 1:
        if (S1 < t) {
          signal1Function();
        }
        currentSignal = 2;
        break;
      case 2:
        if (S2 < t) {
          signal2Function();
        }
        currentSignal = 3;
        break;
      case 3:
        if (S3 < t) {
          signal3Function();
        }
        currentSignal = 4;
        break;
      case 4:
        if (S4 < t) {
          signal4Function();
        }
        currentSignal = 1;
        break;
      default:
        currentSignal = 1;
        break;
    }
  }
}

// Function to read ultrasonic sensors
void readSensors() {
  // Read from first ultrasonic sensor
  digitalWrite(triggerpin1, LOW);
  delayMicroseconds(2);
  digitalWrite(triggerpin1, HIGH);
  delayMicroseconds(10);
  digitalWrite(triggerpin1, LOW);
  time1 = pulseIn(echopin1, HIGH);
  S1 = time1 * 0.034 / 2;

  // Read from second ultrasonic sensor
  digitalWrite(triggerpin2, LOW);
  delayMicroseconds(2);
  digitalWrite(triggerpin2, HIGH);
  delayMicroseconds(10);
  digitalWrite(triggerpin2, LOW);
  time2 = pulseIn(echopin2, HIGH);
  S2 = time2 * 0.034 / 2;

  // Read from third ultrasonic sensor
  digitalWrite(triggerpin3, LOW);
  delayMicroseconds(2);
  digitalWrite(triggerpin3, HIGH);
  delayMicroseconds(10);
  digitalWrite(triggerpin3, LOW);
  time3 = pulseIn(echopin3, HIGH);
  S3 = time3 * 0.034 / 2;

  // Read from fourth ultrasonic sensor
  digitalWrite(triggerpin4, LOW);
  delayMicroseconds(2);
  digitalWrite(triggerpin4, HIGH);
  delayMicroseconds(10);
  digitalWrite(triggerpin4, LOW);
  time4 = pulseIn(echopin4, HIGH);
  S4 = time4 * 0.034 / 2;

  // Print distance values on serial monitor for debugging
  Serial.print("S1: ");
  Serial.print(S1);
  Serial.print("  S2: ");
  Serial.print(S2);
  Serial.print("  S3: ");
  Serial.print(S3);
  Serial.print("  S4: ");
  Serial.println(S4);
}

void signal1Function() {
  Serial.println("1");
  low();
  digitalWrite(signal1[0], LOW);
  digitalWrite(signal1[2], HIGH);
  delay(redDelay);

  if (S2 < t || S3 < t || S4 < t) {
    digitalWrite(signal1[2], LOW);
    digitalWrite(signal1[1], HIGH);
    delay(yellowDelay);
  }
}

void signal2Function() {
  Serial.println("2");
  low();
  digitalWrite(signal2[0], LOW);
  digitalWrite(signal2[2], HIGH);
  delay(redDelay);

  if (S1 < t || S3 < t || S4 < t) {
    digitalWrite(signal2[2], LOW);
    digitalWrite(signal2[1], HIGH);
    delay(yellowDelay);
  }
}

void signal3Function() {
  Serial.println("3");
  low();
  digitalWrite(signal3[0], LOW);
  digitalWrite(signal3[2], HIGH);
  delay(redDelay);

  if (S1 < t || S2 < t || S4 < t) {
    digitalWrite(signal3[2], LOW);
    digitalWrite(signal3[1], HIGH);
    delay(yellowDelay);
  }
}

void signal4Function() {
  Serial.println("4");
  low();
  digitalWrite(signal4[0], LOW);
  digitalWrite(signal4[2], HIGH);
  delay(redDelay);

  if (S1 < t || S2 < t || S3 < t) {
    digitalWrite(signal4[2], LOW);
    digitalWrite(signal4[1], HIGH);
    delay(yellowDelay);
  }
}

// Function to make all LEDs LOW except RED ones
void low() {
  for (int i = 1; i < 3; i++) {
    digitalWrite(signal1[i], LOW);
    digitalWrite(signal2[i], LOW);
    digitalWrite(signal3[i], LOW);
    digitalWrite(signal4[i], LOW);
  }
  for (int i = 0; i < 1; i++) {
    digitalWrite(signal1[i], HIGH);
    digitalWrite(signal2[i], HIGH);
    digitalWrite(signal3[i], HIGH);
    digitalWrite(signal4[i], HIGH);
  }
}